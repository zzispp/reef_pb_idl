// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sub/v1/reef_sub_service_bsc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradeServiceBsc_SubscribeTrade_FullMethodName = "/trade.v1.TradeServiceBsc/SubscribeTrade"
)

// TradeServiceBscClient is the client API for TradeServiceBsc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 交易订阅服务
type TradeServiceBscClient interface {
	// 订阅代币交易流 - 双向流，支持动态切换mint地址
	SubscribeTrade(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTradeRequest, TradeEvent], error)
}

type tradeServiceBscClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceBscClient(cc grpc.ClientConnInterface) TradeServiceBscClient {
	return &tradeServiceBscClient{cc}
}

func (c *tradeServiceBscClient) SubscribeTrade(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTradeRequest, TradeEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradeServiceBsc_ServiceDesc.Streams[0], TradeServiceBsc_SubscribeTrade_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTradeRequest, TradeEvent]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceBsc_SubscribeTradeClient = grpc.BidiStreamingClient[SubscribeTradeRequest, TradeEvent]

// TradeServiceBscServer is the server API for TradeServiceBsc service.
// All implementations must embed UnimplementedTradeServiceBscServer
// for forward compatibility.
//
// 交易订阅服务
type TradeServiceBscServer interface {
	// 订阅代币交易流 - 双向流，支持动态切换mint地址
	SubscribeTrade(grpc.BidiStreamingServer[SubscribeTradeRequest, TradeEvent]) error
	mustEmbedUnimplementedTradeServiceBscServer()
}

// UnimplementedTradeServiceBscServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradeServiceBscServer struct{}

func (UnimplementedTradeServiceBscServer) SubscribeTrade(grpc.BidiStreamingServer[SubscribeTradeRequest, TradeEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTrade not implemented")
}
func (UnimplementedTradeServiceBscServer) mustEmbedUnimplementedTradeServiceBscServer() {}
func (UnimplementedTradeServiceBscServer) testEmbeddedByValue()                         {}

// UnsafeTradeServiceBscServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceBscServer will
// result in compilation errors.
type UnsafeTradeServiceBscServer interface {
	mustEmbedUnimplementedTradeServiceBscServer()
}

func RegisterTradeServiceBscServer(s grpc.ServiceRegistrar, srv TradeServiceBscServer) {
	// If the following call pancis, it indicates UnimplementedTradeServiceBscServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradeServiceBsc_ServiceDesc, srv)
}

func _TradeServiceBsc_SubscribeTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradeServiceBscServer).SubscribeTrade(&grpc.GenericServerStream[SubscribeTradeRequest, TradeEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceBsc_SubscribeTradeServer = grpc.BidiStreamingServer[SubscribeTradeRequest, TradeEvent]

// TradeServiceBsc_ServiceDesc is the grpc.ServiceDesc for TradeServiceBsc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeServiceBsc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trade.v1.TradeServiceBsc",
	HandlerType: (*TradeServiceBscServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTrade",
			Handler:       _TradeServiceBsc_SubscribeTrade_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sub/v1/reef_sub_service_bsc.proto",
}
