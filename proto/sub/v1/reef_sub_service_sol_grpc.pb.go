// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sub/v1/reef_sub_service_sol.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradeServiceSol_SubscribeTradeSol_FullMethodName    = "/trade_service.TradeServiceSol/SubscribeTradeSol"
	TradeServiceSol_SubscribeLatestTrade_FullMethodName = "/trade_service.TradeServiceSol/SubscribeLatestTrade"
)

// TradeServiceSolClient is the client API for TradeServiceSol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 交易服务
type TradeServiceSolClient interface {
	// 订阅交易流（支持动态切换 mint 地址）
	SubscribeTradeSol(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTradeRequestSol, TradeResponseSol], error)
	// 订阅最新交易流（所有代币）
	SubscribeLatestTrade(ctx context.Context, in *SubscribeLatestTradeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TradeResponseSol], error)
}

type tradeServiceSolClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceSolClient(cc grpc.ClientConnInterface) TradeServiceSolClient {
	return &tradeServiceSolClient{cc}
}

func (c *tradeServiceSolClient) SubscribeTradeSol(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTradeRequestSol, TradeResponseSol], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradeServiceSol_ServiceDesc.Streams[0], TradeServiceSol_SubscribeTradeSol_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTradeRequestSol, TradeResponseSol]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceSol_SubscribeTradeSolClient = grpc.BidiStreamingClient[SubscribeTradeRequestSol, TradeResponseSol]

func (c *tradeServiceSolClient) SubscribeLatestTrade(ctx context.Context, in *SubscribeLatestTradeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TradeResponseSol], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradeServiceSol_ServiceDesc.Streams[1], TradeServiceSol_SubscribeLatestTrade_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeLatestTradeRequest, TradeResponseSol]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceSol_SubscribeLatestTradeClient = grpc.ServerStreamingClient[TradeResponseSol]

// TradeServiceSolServer is the server API for TradeServiceSol service.
// All implementations must embed UnimplementedTradeServiceSolServer
// for forward compatibility.
//
// 交易服务
type TradeServiceSolServer interface {
	// 订阅交易流（支持动态切换 mint 地址）
	SubscribeTradeSol(grpc.BidiStreamingServer[SubscribeTradeRequestSol, TradeResponseSol]) error
	// 订阅最新交易流（所有代币）
	SubscribeLatestTrade(*SubscribeLatestTradeRequest, grpc.ServerStreamingServer[TradeResponseSol]) error
	mustEmbedUnimplementedTradeServiceSolServer()
}

// UnimplementedTradeServiceSolServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradeServiceSolServer struct{}

func (UnimplementedTradeServiceSolServer) SubscribeTradeSol(grpc.BidiStreamingServer[SubscribeTradeRequestSol, TradeResponseSol]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTradeSol not implemented")
}
func (UnimplementedTradeServiceSolServer) SubscribeLatestTrade(*SubscribeLatestTradeRequest, grpc.ServerStreamingServer[TradeResponseSol]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLatestTrade not implemented")
}
func (UnimplementedTradeServiceSolServer) mustEmbedUnimplementedTradeServiceSolServer() {}
func (UnimplementedTradeServiceSolServer) testEmbeddedByValue()                         {}

// UnsafeTradeServiceSolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceSolServer will
// result in compilation errors.
type UnsafeTradeServiceSolServer interface {
	mustEmbedUnimplementedTradeServiceSolServer()
}

func RegisterTradeServiceSolServer(s grpc.ServiceRegistrar, srv TradeServiceSolServer) {
	// If the following call pancis, it indicates UnimplementedTradeServiceSolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradeServiceSol_ServiceDesc, srv)
}

func _TradeServiceSol_SubscribeTradeSol_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradeServiceSolServer).SubscribeTradeSol(&grpc.GenericServerStream[SubscribeTradeRequestSol, TradeResponseSol]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceSol_SubscribeTradeSolServer = grpc.BidiStreamingServer[SubscribeTradeRequestSol, TradeResponseSol]

func _TradeServiceSol_SubscribeLatestTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLatestTradeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradeServiceSolServer).SubscribeLatestTrade(m, &grpc.GenericServerStream[SubscribeLatestTradeRequest, TradeResponseSol]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceSol_SubscribeLatestTradeServer = grpc.ServerStreamingServer[TradeResponseSol]

// TradeServiceSol_ServiceDesc is the grpc.ServiceDesc for TradeServiceSol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeServiceSol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trade_service.TradeServiceSol",
	HandlerType: (*TradeServiceSolServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTradeSol",
			Handler:       _TradeServiceSol_SubscribeTradeSol_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeLatestTrade",
			Handler:       _TradeServiceSol_SubscribeLatestTrade_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sub/v1/reef_sub_service_sol.proto",
}
