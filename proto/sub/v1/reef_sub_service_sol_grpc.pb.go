// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sub/v1/reef_sub_service_sol.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradeServiceSol_SubscribeTrade_FullMethodName = "/trade_service.TradeServiceSol/SubscribeTrade"
)

// TradeServiceSolClient is the client API for TradeServiceSol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 交易服务
type TradeServiceSolClient interface {
	// 订阅交易流（支持动态切换 mint 地址）
	SubscribeTrade(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTradeRequest, TradeResponse], error)
}

type tradeServiceSolClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceSolClient(cc grpc.ClientConnInterface) TradeServiceSolClient {
	return &tradeServiceSolClient{cc}
}

func (c *tradeServiceSolClient) SubscribeTrade(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTradeRequest, TradeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradeServiceSol_ServiceDesc.Streams[0], TradeServiceSol_SubscribeTrade_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTradeRequest, TradeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceSol_SubscribeTradeClient = grpc.BidiStreamingClient[SubscribeTradeRequest, TradeResponse]

// TradeServiceSolServer is the server API for TradeServiceSol service.
// All implementations must embed UnimplementedTradeServiceSolServer
// for forward compatibility.
//
// 交易服务
type TradeServiceSolServer interface {
	// 订阅交易流（支持动态切换 mint 地址）
	SubscribeTrade(grpc.BidiStreamingServer[SubscribeTradeRequest, TradeResponse]) error
	mustEmbedUnimplementedTradeServiceSolServer()
}

// UnimplementedTradeServiceSolServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradeServiceSolServer struct{}

func (UnimplementedTradeServiceSolServer) SubscribeTrade(grpc.BidiStreamingServer[SubscribeTradeRequest, TradeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTrade not implemented")
}
func (UnimplementedTradeServiceSolServer) mustEmbedUnimplementedTradeServiceSolServer() {}
func (UnimplementedTradeServiceSolServer) testEmbeddedByValue()                         {}

// UnsafeTradeServiceSolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceSolServer will
// result in compilation errors.
type UnsafeTradeServiceSolServer interface {
	mustEmbedUnimplementedTradeServiceSolServer()
}

func RegisterTradeServiceSolServer(s grpc.ServiceRegistrar, srv TradeServiceSolServer) {
	// If the following call pancis, it indicates UnimplementedTradeServiceSolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradeServiceSol_ServiceDesc, srv)
}

func _TradeServiceSol_SubscribeTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradeServiceSolServer).SubscribeTrade(&grpc.GenericServerStream[SubscribeTradeRequest, TradeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradeServiceSol_SubscribeTradeServer = grpc.BidiStreamingServer[SubscribeTradeRequest, TradeResponse]

// TradeServiceSol_ServiceDesc is the grpc.ServiceDesc for TradeServiceSol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeServiceSol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trade_service.TradeServiceSol",
	HandlerType: (*TradeServiceSolServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTrade",
			Handler:       _TradeServiceSol_SubscribeTrade_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sub/v1/reef_sub_service_sol.proto",
}
