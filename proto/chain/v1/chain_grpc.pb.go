// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: chain/v1/chain.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chain_CreateChain_FullMethodName = "/api.chain.v1.Chain/CreateChain"
	Chain_UpdateChain_FullMethodName = "/api.chain.v1.Chain/UpdateChain"
	Chain_DeleteChain_FullMethodName = "/api.chain.v1.Chain/DeleteChain"
	Chain_GetChain_FullMethodName    = "/api.chain.v1.Chain/GetChain"
	Chain_ListChain_FullMethodName   = "/api.chain.v1.Chain/ListChain"
)

// ChainClient is the client API for Chain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainClient interface {
	CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainReply, error)
	UpdateChain(ctx context.Context, in *UpdateChainRequest, opts ...grpc.CallOption) (*UpdateChainReply, error)
	DeleteChain(ctx context.Context, in *DeleteChainRequest, opts ...grpc.CallOption) (*DeleteChainReply, error)
	GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainReply, error)
	ListChain(ctx context.Context, in *ListChainRequest, opts ...grpc.CallOption) (*ListChainReply, error)
}

type chainClient struct {
	cc grpc.ClientConnInterface
}

func NewChainClient(cc grpc.ClientConnInterface) ChainClient {
	return &chainClient{cc}
}

func (c *chainClient) CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChainReply)
	err := c.cc.Invoke(ctx, Chain_CreateChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) UpdateChain(ctx context.Context, in *UpdateChainRequest, opts ...grpc.CallOption) (*UpdateChainReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChainReply)
	err := c.cc.Invoke(ctx, Chain_UpdateChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) DeleteChain(ctx context.Context, in *DeleteChainRequest, opts ...grpc.CallOption) (*DeleteChainReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChainReply)
	err := c.cc.Invoke(ctx, Chain_DeleteChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainReply)
	err := c.cc.Invoke(ctx, Chain_GetChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) ListChain(ctx context.Context, in *ListChainRequest, opts ...grpc.CallOption) (*ListChainReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChainReply)
	err := c.cc.Invoke(ctx, Chain_ListChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainServer is the server API for Chain service.
// All implementations must embed UnimplementedChainServer
// for forward compatibility.
type ChainServer interface {
	CreateChain(context.Context, *CreateChainRequest) (*CreateChainReply, error)
	UpdateChain(context.Context, *UpdateChainRequest) (*UpdateChainReply, error)
	DeleteChain(context.Context, *DeleteChainRequest) (*DeleteChainReply, error)
	GetChain(context.Context, *GetChainRequest) (*GetChainReply, error)
	ListChain(context.Context, *ListChainRequest) (*ListChainReply, error)
	mustEmbedUnimplementedChainServer()
}

// UnimplementedChainServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChainServer struct{}

func (UnimplementedChainServer) CreateChain(context.Context, *CreateChainRequest) (*CreateChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChain not implemented")
}
func (UnimplementedChainServer) UpdateChain(context.Context, *UpdateChainRequest) (*UpdateChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChain not implemented")
}
func (UnimplementedChainServer) DeleteChain(context.Context, *DeleteChainRequest) (*DeleteChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChain not implemented")
}
func (UnimplementedChainServer) GetChain(context.Context, *GetChainRequest) (*GetChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}
func (UnimplementedChainServer) ListChain(context.Context, *ListChainRequest) (*ListChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChain not implemented")
}
func (UnimplementedChainServer) mustEmbedUnimplementedChainServer() {}
func (UnimplementedChainServer) testEmbeddedByValue()               {}

// UnsafeChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainServer will
// result in compilation errors.
type UnsafeChainServer interface {
	mustEmbedUnimplementedChainServer()
}

func RegisterChainServer(s grpc.ServiceRegistrar, srv ChainServer) {
	// If the following call pancis, it indicates UnimplementedChainServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chain_ServiceDesc, srv)
}

func _Chain_CreateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).CreateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chain_CreateChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).CreateChain(ctx, req.(*CreateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_UpdateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).UpdateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chain_UpdateChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).UpdateChain(ctx, req.(*UpdateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_DeleteChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).DeleteChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chain_DeleteChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).DeleteChain(ctx, req.(*DeleteChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chain_GetChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).GetChain(ctx, req.(*GetChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_ListChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).ListChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chain_ListChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).ListChain(ctx, req.(*ListChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chain_ServiceDesc is the grpc.ServiceDesc for Chain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.chain.v1.Chain",
	HandlerType: (*ChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChain",
			Handler:    _Chain_CreateChain_Handler,
		},
		{
			MethodName: "UpdateChain",
			Handler:    _Chain_UpdateChain_Handler,
		},
		{
			MethodName: "DeleteChain",
			Handler:    _Chain_DeleteChain_Handler,
		},
		{
			MethodName: "GetChain",
			Handler:    _Chain_GetChain_Handler,
		},
		{
			MethodName: "ListChain",
			Handler:    _Chain_ListChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain/v1/chain.proto",
}
