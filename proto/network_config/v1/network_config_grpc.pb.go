// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: network_config/v1/network_config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkConfig_CreateNetworkConfig_FullMethodName                = "/api.network_config.v1.NetworkConfig/CreateNetworkConfig"
	NetworkConfig_UpdateNetworkConfig_FullMethodName                = "/api.network_config.v1.NetworkConfig/UpdateNetworkConfig"
	NetworkConfig_DeleteNetworkConfig_FullMethodName                = "/api.network_config.v1.NetworkConfig/DeleteNetworkConfig"
	NetworkConfig_GetNetworkConfig_FullMethodName                   = "/api.network_config.v1.NetworkConfig/GetNetworkConfig"
	NetworkConfig_ListNetworkConfig_FullMethodName                  = "/api.network_config.v1.NetworkConfig/ListNetworkConfig"
	NetworkConfig_ListNetworkConfigByNetwork_FullMethodName         = "/api.network_config.v1.NetworkConfig/ListNetworkConfigByNetwork"
	NetworkConfig_ListNetworkConfigByNetworkAndChain_FullMethodName = "/api.network_config.v1.NetworkConfig/ListNetworkConfigByNetworkAndChain"
)

// NetworkConfigClient is the client API for NetworkConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkConfigClient interface {
	CreateNetworkConfig(ctx context.Context, in *CreateNetworkConfigRequest, opts ...grpc.CallOption) (*CreateNetworkConfigReply, error)
	UpdateNetworkConfig(ctx context.Context, in *UpdateNetworkConfigRequest, opts ...grpc.CallOption) (*UpdateNetworkConfigReply, error)
	DeleteNetworkConfig(ctx context.Context, in *DeleteNetworkConfigRequest, opts ...grpc.CallOption) (*DeleteNetworkConfigReply, error)
	GetNetworkConfig(ctx context.Context, in *GetNetworkConfigRequest, opts ...grpc.CallOption) (*GetNetworkConfigReply, error)
	ListNetworkConfig(ctx context.Context, in *ListNetworkConfigRequest, opts ...grpc.CallOption) (*ListNetworkConfigReply, error)
	ListNetworkConfigByNetwork(ctx context.Context, in *ListNetworkConfigByNetworkRequest, opts ...grpc.CallOption) (*ListNetworkConfigByNetworkReply, error)
	ListNetworkConfigByNetworkAndChain(ctx context.Context, in *ListNetworkConfigByNetworkAndChainRequest, opts ...grpc.CallOption) (*ListNetworkConfigByNetworkAndChainReply, error)
}

type networkConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkConfigClient(cc grpc.ClientConnInterface) NetworkConfigClient {
	return &networkConfigClient{cc}
}

func (c *networkConfigClient) CreateNetworkConfig(ctx context.Context, in *CreateNetworkConfigRequest, opts ...grpc.CallOption) (*CreateNetworkConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNetworkConfigReply)
	err := c.cc.Invoke(ctx, NetworkConfig_CreateNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) UpdateNetworkConfig(ctx context.Context, in *UpdateNetworkConfigRequest, opts ...grpc.CallOption) (*UpdateNetworkConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNetworkConfigReply)
	err := c.cc.Invoke(ctx, NetworkConfig_UpdateNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) DeleteNetworkConfig(ctx context.Context, in *DeleteNetworkConfigRequest, opts ...grpc.CallOption) (*DeleteNetworkConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNetworkConfigReply)
	err := c.cc.Invoke(ctx, NetworkConfig_DeleteNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) GetNetworkConfig(ctx context.Context, in *GetNetworkConfigRequest, opts ...grpc.CallOption) (*GetNetworkConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkConfigReply)
	err := c.cc.Invoke(ctx, NetworkConfig_GetNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) ListNetworkConfig(ctx context.Context, in *ListNetworkConfigRequest, opts ...grpc.CallOption) (*ListNetworkConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworkConfigReply)
	err := c.cc.Invoke(ctx, NetworkConfig_ListNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) ListNetworkConfigByNetwork(ctx context.Context, in *ListNetworkConfigByNetworkRequest, opts ...grpc.CallOption) (*ListNetworkConfigByNetworkReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworkConfigByNetworkReply)
	err := c.cc.Invoke(ctx, NetworkConfig_ListNetworkConfigByNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) ListNetworkConfigByNetworkAndChain(ctx context.Context, in *ListNetworkConfigByNetworkAndChainRequest, opts ...grpc.CallOption) (*ListNetworkConfigByNetworkAndChainReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworkConfigByNetworkAndChainReply)
	err := c.cc.Invoke(ctx, NetworkConfig_ListNetworkConfigByNetworkAndChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkConfigServer is the server API for NetworkConfig service.
// All implementations must embed UnimplementedNetworkConfigServer
// for forward compatibility.
type NetworkConfigServer interface {
	CreateNetworkConfig(context.Context, *CreateNetworkConfigRequest) (*CreateNetworkConfigReply, error)
	UpdateNetworkConfig(context.Context, *UpdateNetworkConfigRequest) (*UpdateNetworkConfigReply, error)
	DeleteNetworkConfig(context.Context, *DeleteNetworkConfigRequest) (*DeleteNetworkConfigReply, error)
	GetNetworkConfig(context.Context, *GetNetworkConfigRequest) (*GetNetworkConfigReply, error)
	ListNetworkConfig(context.Context, *ListNetworkConfigRequest) (*ListNetworkConfigReply, error)
	ListNetworkConfigByNetwork(context.Context, *ListNetworkConfigByNetworkRequest) (*ListNetworkConfigByNetworkReply, error)
	ListNetworkConfigByNetworkAndChain(context.Context, *ListNetworkConfigByNetworkAndChainRequest) (*ListNetworkConfigByNetworkAndChainReply, error)
	mustEmbedUnimplementedNetworkConfigServer()
}

// UnimplementedNetworkConfigServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkConfigServer struct{}

func (UnimplementedNetworkConfigServer) CreateNetworkConfig(context.Context, *CreateNetworkConfigRequest) (*CreateNetworkConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) UpdateNetworkConfig(context.Context, *UpdateNetworkConfigRequest) (*UpdateNetworkConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) DeleteNetworkConfig(context.Context, *DeleteNetworkConfigRequest) (*DeleteNetworkConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) GetNetworkConfig(context.Context, *GetNetworkConfigRequest) (*GetNetworkConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) ListNetworkConfig(context.Context, *ListNetworkConfigRequest) (*ListNetworkConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) ListNetworkConfigByNetwork(context.Context, *ListNetworkConfigByNetworkRequest) (*ListNetworkConfigByNetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkConfigByNetwork not implemented")
}
func (UnimplementedNetworkConfigServer) ListNetworkConfigByNetworkAndChain(context.Context, *ListNetworkConfigByNetworkAndChainRequest) (*ListNetworkConfigByNetworkAndChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkConfigByNetworkAndChain not implemented")
}
func (UnimplementedNetworkConfigServer) mustEmbedUnimplementedNetworkConfigServer() {}
func (UnimplementedNetworkConfigServer) testEmbeddedByValue()                       {}

// UnsafeNetworkConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkConfigServer will
// result in compilation errors.
type UnsafeNetworkConfigServer interface {
	mustEmbedUnimplementedNetworkConfigServer()
}

func RegisterNetworkConfigServer(s grpc.ServiceRegistrar, srv NetworkConfigServer) {
	// If the following call pancis, it indicates UnimplementedNetworkConfigServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkConfig_ServiceDesc, srv)
}

func _NetworkConfig_CreateNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).CreateNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_CreateNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).CreateNetworkConfig(ctx, req.(*CreateNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_UpdateNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).UpdateNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_UpdateNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).UpdateNetworkConfig(ctx, req.(*UpdateNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_DeleteNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).DeleteNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_DeleteNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).DeleteNetworkConfig(ctx, req.(*DeleteNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_GetNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).GetNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_GetNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).GetNetworkConfig(ctx, req.(*GetNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_ListNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).ListNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_ListNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).ListNetworkConfig(ctx, req.(*ListNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_ListNetworkConfigByNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkConfigByNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).ListNetworkConfigByNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_ListNetworkConfigByNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).ListNetworkConfigByNetwork(ctx, req.(*ListNetworkConfigByNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_ListNetworkConfigByNetworkAndChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkConfigByNetworkAndChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).ListNetworkConfigByNetworkAndChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_ListNetworkConfigByNetworkAndChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).ListNetworkConfigByNetworkAndChain(ctx, req.(*ListNetworkConfigByNetworkAndChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkConfig_ServiceDesc is the grpc.ServiceDesc for NetworkConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.network_config.v1.NetworkConfig",
	HandlerType: (*NetworkConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetworkConfig",
			Handler:    _NetworkConfig_CreateNetworkConfig_Handler,
		},
		{
			MethodName: "UpdateNetworkConfig",
			Handler:    _NetworkConfig_UpdateNetworkConfig_Handler,
		},
		{
			MethodName: "DeleteNetworkConfig",
			Handler:    _NetworkConfig_DeleteNetworkConfig_Handler,
		},
		{
			MethodName: "GetNetworkConfig",
			Handler:    _NetworkConfig_GetNetworkConfig_Handler,
		},
		{
			MethodName: "ListNetworkConfig",
			Handler:    _NetworkConfig_ListNetworkConfig_Handler,
		},
		{
			MethodName: "ListNetworkConfigByNetwork",
			Handler:    _NetworkConfig_ListNetworkConfigByNetwork_Handler,
		},
		{
			MethodName: "ListNetworkConfigByNetworkAndChain",
			Handler:    _NetworkConfig_ListNetworkConfigByNetworkAndChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_config/v1/network_config.proto",
}
