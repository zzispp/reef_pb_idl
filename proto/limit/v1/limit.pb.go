// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: limit/v1/limit.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AmountType int32

const (
	AmountType_AMOUNT_TYPE_AMOUNT  AmountType = 0 // 数量
	AmountType_AMOUNT_TYPE_PERCENT AmountType = 1 // 百分比
)

// Enum value maps for AmountType.
var (
	AmountType_name = map[int32]string{
		0: "AMOUNT_TYPE_AMOUNT",
		1: "AMOUNT_TYPE_PERCENT",
	}
	AmountType_value = map[string]int32{
		"AMOUNT_TYPE_AMOUNT":  0,
		"AMOUNT_TYPE_PERCENT": 1,
	}
)

func (x AmountType) Enum() *AmountType {
	p := new(AmountType)
	*p = x
	return p
}

func (x AmountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmountType) Descriptor() protoreflect.EnumDescriptor {
	return file_limit_v1_limit_proto_enumTypes[0].Descriptor()
}

func (AmountType) Type() protoreflect.EnumType {
	return &file_limit_v1_limit_proto_enumTypes[0]
}

func (x AmountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmountType.Descriptor instead.
func (AmountType) EnumDescriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{0}
}

type StopLossProfitType int32

const (
	StopLossProfitType_STOP_LOSS_PROFIT_TYPE_TAKE_PROFIT StopLossProfitType = 0 // 止盈
	StopLossProfitType_STOP_LOSS_PROFIT_TYPE_STOP_LOSS   StopLossProfitType = 1 // 止损
)

// Enum value maps for StopLossProfitType.
var (
	StopLossProfitType_name = map[int32]string{
		0: "STOP_LOSS_PROFIT_TYPE_TAKE_PROFIT",
		1: "STOP_LOSS_PROFIT_TYPE_STOP_LOSS",
	}
	StopLossProfitType_value = map[string]int32{
		"STOP_LOSS_PROFIT_TYPE_TAKE_PROFIT": 0,
		"STOP_LOSS_PROFIT_TYPE_STOP_LOSS":   1,
	}
)

func (x StopLossProfitType) Enum() *StopLossProfitType {
	p := new(StopLossProfitType)
	*p = x
	return p
}

func (x StopLossProfitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopLossProfitType) Descriptor() protoreflect.EnumDescriptor {
	return file_limit_v1_limit_proto_enumTypes[1].Descriptor()
}

func (StopLossProfitType) Type() protoreflect.EnumType {
	return &file_limit_v1_limit_proto_enumTypes[1]
}

func (x StopLossProfitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopLossProfitType.Descriptor instead.
func (StopLossProfitType) EnumDescriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{1}
}

// 通用分页请求
type PageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // 页码，从1开始
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	mi := &file_limit_v1_limit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{0}
}

func (x *PageRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 通用分页响应
type PageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                               // 当前页码
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       // 每页大小
	Total         int64                  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                             // 总记录数
	TotalPages    int32                  `protobuf:"varint,4,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"` // 总页数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageResponse) Reset() {
	*x = PageResponse{}
	mi := &file_limit_v1_limit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageResponse) ProtoMessage() {}

func (x *PageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageResponse.ProtoReflect.Descriptor instead.
func (*PageResponse) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{1}
}

func (x *PageResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// 限价买入订单 - 按价格买入XXX数量的主网币
type LimitOrderBuy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TargetPrice       float64                `protobuf:"fixed64,1,opt,name=target_price,json=targetPrice,proto3" json:"target_price,omitempty"`                           // 目标价格
	Amount            float64                `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                        // 购买数量(主网币数量)
	TakeProfitPercent *float64               `protobuf:"fixed64,3,opt,name=take_profit_percent,json=takeProfitPercent,proto3,oneof" json:"take_profit_percent,omitempty"` // 止盈百分比
	StopLossPercent   *float64               `protobuf:"fixed64,4,opt,name=stop_loss_percent,json=stopLossPercent,proto3,oneof" json:"stop_loss_percent,omitempty"`       // 止损百分比
	TakeProfitOrderId *string                `protobuf:"bytes,5,opt,name=take_profit_order_id,json=takeProfitOrderId,proto3,oneof" json:"take_profit_order_id,omitempty"` // 止盈订单ID
	StopLossOrderId   *string                `protobuf:"bytes,6,opt,name=stop_loss_order_id,json=stopLossOrderId,proto3,oneof" json:"stop_loss_order_id,omitempty"`       // 止损订单ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LimitOrderBuy) Reset() {
	*x = LimitOrderBuy{}
	mi := &file_limit_v1_limit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitOrderBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitOrderBuy) ProtoMessage() {}

func (x *LimitOrderBuy) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitOrderBuy.ProtoReflect.Descriptor instead.
func (*LimitOrderBuy) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{2}
}

func (x *LimitOrderBuy) GetTargetPrice() float64 {
	if x != nil {
		return x.TargetPrice
	}
	return 0
}

func (x *LimitOrderBuy) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LimitOrderBuy) GetTakeProfitPercent() float64 {
	if x != nil && x.TakeProfitPercent != nil {
		return *x.TakeProfitPercent
	}
	return 0
}

func (x *LimitOrderBuy) GetStopLossPercent() float64 {
	if x != nil && x.StopLossPercent != nil {
		return *x.StopLossPercent
	}
	return 0
}

func (x *LimitOrderBuy) GetTakeProfitOrderId() string {
	if x != nil && x.TakeProfitOrderId != nil {
		return *x.TakeProfitOrderId
	}
	return ""
}

func (x *LimitOrderBuy) GetStopLossOrderId() string {
	if x != nil && x.StopLossOrderId != nil {
		return *x.StopLossOrderId
	}
	return ""
}

// 限价卖出订单
type LimitOrderSell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPrice   float64                `protobuf:"fixed64,1,opt,name=target_price,json=targetPrice,proto3" json:"target_price,omitempty"`                          // 目标价格
	AmountType    AmountType             `protobuf:"varint,2,opt,name=amount_type,json=amountType,proto3,enum=api.limit.v1.AmountType" json:"amount_type,omitempty"` // 数量类型
	AmountValue   float64                `protobuf:"fixed64,3,opt,name=amount_value,json=amountValue,proto3" json:"amount_value,omitempty"`                          // 数量值(根据amount_type决定是具体数量还是百分比)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LimitOrderSell) Reset() {
	*x = LimitOrderSell{}
	mi := &file_limit_v1_limit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitOrderSell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitOrderSell) ProtoMessage() {}

func (x *LimitOrderSell) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitOrderSell.ProtoReflect.Descriptor instead.
func (*LimitOrderSell) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{3}
}

func (x *LimitOrderSell) GetTargetPrice() float64 {
	if x != nil {
		return x.TargetPrice
	}
	return 0
}

func (x *LimitOrderSell) GetAmountType() AmountType {
	if x != nil {
		return x.AmountType
	}
	return AmountType_AMOUNT_TYPE_AMOUNT
}

func (x *LimitOrderSell) GetAmountValue() float64 {
	if x != nil {
		return x.AmountValue
	}
	return 0
}

// 止盈止损订单
type LimitOrderStopLossProfit struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           StopLossProfitType     `protobuf:"varint,1,opt,name=type,proto3,enum=api.limit.v1.StopLossProfitType" json:"type,omitempty"`         // 止盈或止损
	Percent        float64                `protobuf:"fixed64,2,opt,name=percent,proto3" json:"percent,omitempty"`                                       // 百分比
	TokenValueUsdt float64                `protobuf:"fixed64,3,opt,name=token_value_usdt,json=tokenValueUsdt,proto3" json:"token_value_usdt,omitempty"` // 下单时候的代币价值(USDT)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LimitOrderStopLossProfit) Reset() {
	*x = LimitOrderStopLossProfit{}
	mi := &file_limit_v1_limit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitOrderStopLossProfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitOrderStopLossProfit) ProtoMessage() {}

func (x *LimitOrderStopLossProfit) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitOrderStopLossProfit.ProtoReflect.Descriptor instead.
func (*LimitOrderStopLossProfit) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{4}
}

func (x *LimitOrderStopLossProfit) GetType() StopLossProfitType {
	if x != nil {
		return x.Type
	}
	return StopLossProfitType_STOP_LOSS_PROFIT_TYPE_TAKE_PROFIT
}

func (x *LimitOrderStopLossProfit) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *LimitOrderStopLossProfit) GetTokenValueUsdt() float64 {
	if x != nil {
		return x.TokenValueUsdt
	}
	return 0
}

type CreateLimitOrderRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Chain        string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`                                   // 链
	UserAddress  string                 `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`    // 用户地址
	TokenAddress string                 `protobuf:"bytes,3,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	PrivateKey   string                 `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`       // 私钥
	Slippage     float64                `protobuf:"fixed64,5,opt,name=slippage,proto3" json:"slippage,omitempty"`                           // 滑点
	BizId        string                 `protobuf:"bytes,6,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`                      // 业务ID
	BizUserId    string                 `protobuf:"bytes,7,opt,name=biz_user_id,json=bizUserId,proto3" json:"biz_user_id,omitempty"`        // 业务用户ID
	GasPrice     float64                `protobuf:"fixed64,8,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`           // gas 价格
	ExpireAt     uint64                 `protobuf:"varint,9,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`            // 过期时间
	// 根据limit_type选择对应的订单数据
	//
	// Types that are valid to be assigned to OrderData:
	//
	//	*CreateLimitOrderRequest_LimitBuy
	//	*CreateLimitOrderRequest_LimitSell
	//	*CreateLimitOrderRequest_StopLossProfit
	OrderData     isCreateLimitOrderRequest_OrderData `protobuf_oneof:"order_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLimitOrderRequest) Reset() {
	*x = CreateLimitOrderRequest{}
	mi := &file_limit_v1_limit_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLimitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLimitOrderRequest) ProtoMessage() {}

func (x *CreateLimitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLimitOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateLimitOrderRequest) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{5}
}

func (x *CreateLimitOrderRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateLimitOrderRequest) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *CreateLimitOrderRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *CreateLimitOrderRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *CreateLimitOrderRequest) GetSlippage() float64 {
	if x != nil {
		return x.Slippage
	}
	return 0
}

func (x *CreateLimitOrderRequest) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *CreateLimitOrderRequest) GetBizUserId() string {
	if x != nil {
		return x.BizUserId
	}
	return ""
}

func (x *CreateLimitOrderRequest) GetGasPrice() float64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *CreateLimitOrderRequest) GetExpireAt() uint64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *CreateLimitOrderRequest) GetOrderData() isCreateLimitOrderRequest_OrderData {
	if x != nil {
		return x.OrderData
	}
	return nil
}

func (x *CreateLimitOrderRequest) GetLimitBuy() *LimitOrderBuy {
	if x != nil {
		if x, ok := x.OrderData.(*CreateLimitOrderRequest_LimitBuy); ok {
			return x.LimitBuy
		}
	}
	return nil
}

func (x *CreateLimitOrderRequest) GetLimitSell() *LimitOrderSell {
	if x != nil {
		if x, ok := x.OrderData.(*CreateLimitOrderRequest_LimitSell); ok {
			return x.LimitSell
		}
	}
	return nil
}

func (x *CreateLimitOrderRequest) GetStopLossProfit() *LimitOrderStopLossProfit {
	if x != nil {
		if x, ok := x.OrderData.(*CreateLimitOrderRequest_StopLossProfit); ok {
			return x.StopLossProfit
		}
	}
	return nil
}

type isCreateLimitOrderRequest_OrderData interface {
	isCreateLimitOrderRequest_OrderData()
}

type CreateLimitOrderRequest_LimitBuy struct {
	LimitBuy *LimitOrderBuy `protobuf:"bytes,10,opt,name=limit_buy,json=limitBuy,proto3,oneof"` // 限价买入订单
}

type CreateLimitOrderRequest_LimitSell struct {
	LimitSell *LimitOrderSell `protobuf:"bytes,11,opt,name=limit_sell,json=limitSell,proto3,oneof"` // 限价卖出订单
}

type CreateLimitOrderRequest_StopLossProfit struct {
	StopLossProfit *LimitOrderStopLossProfit `protobuf:"bytes,12,opt,name=stop_loss_profit,json=stopLossProfit,proto3,oneof"` // 止盈止损订单
}

func (*CreateLimitOrderRequest_LimitBuy) isCreateLimitOrderRequest_OrderData() {}

func (*CreateLimitOrderRequest_LimitSell) isCreateLimitOrderRequest_OrderData() {}

func (*CreateLimitOrderRequest_StopLossProfit) isCreateLimitOrderRequest_OrderData() {}

type CreateLimitOrderReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLimitOrderReply) Reset() {
	*x = CreateLimitOrderReply{}
	mi := &file_limit_v1_limit_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLimitOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLimitOrderReply) ProtoMessage() {}

func (x *CreateLimitOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLimitOrderReply.ProtoReflect.Descriptor instead.
func (*CreateLimitOrderReply) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{6}
}

func (x *CreateLimitOrderReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type CancelLimitOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelLimitOrderRequest) Reset() {
	*x = CancelLimitOrderRequest{}
	mi := &file_limit_v1_limit_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelLimitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLimitOrderRequest) ProtoMessage() {}

func (x *CancelLimitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLimitOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelLimitOrderRequest) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{7}
}

func (x *CancelLimitOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type CancelLimitOrderReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelLimitOrderReply) Reset() {
	*x = CancelLimitOrderReply{}
	mi := &file_limit_v1_limit_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelLimitOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLimitOrderReply) ProtoMessage() {}

func (x *CancelLimitOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLimitOrderReply.ProtoReflect.Descriptor instead.
func (*CancelLimitOrderReply) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{8}
}

type GetLimitOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BizId         string                 `protobuf:"bytes,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"` // 业务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitOrderRequest) Reset() {
	*x = GetLimitOrderRequest{}
	mi := &file_limit_v1_limit_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitOrderRequest) ProtoMessage() {}

func (x *GetLimitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitOrderRequest.ProtoReflect.Descriptor instead.
func (*GetLimitOrderRequest) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{9}
}

func (x *GetLimitOrderRequest) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

type LimitOrder struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 订单ID
	CreatedAt    string                 `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 创建时间
	UpdatedAt    string                 `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 修改时间
	DeletedAt    string                 `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`          // 删除时间
	ExpireAt     uint64                 `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`            // 过期时间
	Chain        string                 `protobuf:"bytes,6,opt,name=chain,proto3" json:"chain,omitempty"`                                   // 链
	UserAddress  string                 `protobuf:"bytes,7,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`    // 用户地址
	TokenAddress string                 `protobuf:"bytes,8,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	PrivateKey   string                 `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`       // 私钥
	Slippage     float64                `protobuf:"fixed64,10,opt,name=slippage,proto3" json:"slippage,omitempty"`                          // 滑点
	BizId        string                 `protobuf:"bytes,11,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`                     // 业务ID
	BizUserId    string                 `protobuf:"bytes,12,opt,name=biz_user_id,json=bizUserId,proto3" json:"biz_user_id,omitempty"`       // 业务用户ID
	GasPrice     float64                `protobuf:"fixed64,13,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`          // gas 价格
	Status       int32                  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`                               // 状态
	Result       string                 `protobuf:"bytes,15,opt,name=result,proto3" json:"result,omitempty"`                                // 结果
	// 根据limit_type选择对应的订单数据
	//
	// Types that are valid to be assigned to OrderData:
	//
	//	*LimitOrder_LimitBuy
	//	*LimitOrder_LimitSell
	//	*LimitOrder_StopLossProfit
	OrderData     isLimitOrder_OrderData `protobuf_oneof:"order_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LimitOrder) Reset() {
	*x = LimitOrder{}
	mi := &file_limit_v1_limit_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitOrder) ProtoMessage() {}

func (x *LimitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitOrder.ProtoReflect.Descriptor instead.
func (*LimitOrder) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{10}
}

func (x *LimitOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LimitOrder) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LimitOrder) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *LimitOrder) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *LimitOrder) GetExpireAt() uint64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *LimitOrder) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *LimitOrder) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *LimitOrder) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *LimitOrder) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *LimitOrder) GetSlippage() float64 {
	if x != nil {
		return x.Slippage
	}
	return 0
}

func (x *LimitOrder) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *LimitOrder) GetBizUserId() string {
	if x != nil {
		return x.BizUserId
	}
	return ""
}

func (x *LimitOrder) GetGasPrice() float64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *LimitOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *LimitOrder) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *LimitOrder) GetOrderData() isLimitOrder_OrderData {
	if x != nil {
		return x.OrderData
	}
	return nil
}

func (x *LimitOrder) GetLimitBuy() *LimitOrderBuy {
	if x != nil {
		if x, ok := x.OrderData.(*LimitOrder_LimitBuy); ok {
			return x.LimitBuy
		}
	}
	return nil
}

func (x *LimitOrder) GetLimitSell() *LimitOrderSell {
	if x != nil {
		if x, ok := x.OrderData.(*LimitOrder_LimitSell); ok {
			return x.LimitSell
		}
	}
	return nil
}

func (x *LimitOrder) GetStopLossProfit() *LimitOrderStopLossProfit {
	if x != nil {
		if x, ok := x.OrderData.(*LimitOrder_StopLossProfit); ok {
			return x.StopLossProfit
		}
	}
	return nil
}

type isLimitOrder_OrderData interface {
	isLimitOrder_OrderData()
}

type LimitOrder_LimitBuy struct {
	LimitBuy *LimitOrderBuy `protobuf:"bytes,16,opt,name=limit_buy,json=limitBuy,proto3,oneof"` // 限价买入订单
}

type LimitOrder_LimitSell struct {
	LimitSell *LimitOrderSell `protobuf:"bytes,17,opt,name=limit_sell,json=limitSell,proto3,oneof"` // 限价卖出订单
}

type LimitOrder_StopLossProfit struct {
	StopLossProfit *LimitOrderStopLossProfit `protobuf:"bytes,18,opt,name=stop_loss_profit,json=stopLossProfit,proto3,oneof"` // 止盈止损订单
}

func (*LimitOrder_LimitBuy) isLimitOrder_OrderData() {}

func (*LimitOrder_LimitSell) isLimitOrder_OrderData() {}

func (*LimitOrder_StopLossProfit) isLimitOrder_OrderData() {}

type GetLimitOrderReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LimitOrders   *LimitOrder            `protobuf:"bytes,1,opt,name=limit_orders,json=limitOrders,proto3" json:"limit_orders,omitempty"` // 订单列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitOrderReply) Reset() {
	*x = GetLimitOrderReply{}
	mi := &file_limit_v1_limit_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitOrderReply) ProtoMessage() {}

func (x *GetLimitOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitOrderReply.ProtoReflect.Descriptor instead.
func (*GetLimitOrderReply) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{11}
}

func (x *GetLimitOrderReply) GetLimitOrders() *LimitOrder {
	if x != nil {
		return x.LimitOrders
	}
	return nil
}

type GetLimitOrdersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BizIds        []string               `protobuf:"bytes,1,rep,name=biz_ids,json=bizIds,proto3" json:"biz_ids,omitempty"` // 业务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitOrdersRequest) Reset() {
	*x = GetLimitOrdersRequest{}
	mi := &file_limit_v1_limit_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitOrdersRequest) ProtoMessage() {}

func (x *GetLimitOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetLimitOrdersRequest) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{12}
}

func (x *GetLimitOrdersRequest) GetBizIds() []string {
	if x != nil {
		return x.BizIds
	}
	return nil
}

type GetLimitOrdersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LimitOrders   []*LimitOrder          `protobuf:"bytes,1,rep,name=limit_orders,json=limitOrders,proto3" json:"limit_orders,omitempty"` // 订单列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitOrdersReply) Reset() {
	*x = GetLimitOrdersReply{}
	mi := &file_limit_v1_limit_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitOrdersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitOrdersReply) ProtoMessage() {}

func (x *GetLimitOrdersReply) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitOrdersReply.ProtoReflect.Descriptor instead.
func (*GetLimitOrdersReply) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{13}
}

func (x *GetLimitOrdersReply) GetLimitOrders() []*LimitOrder {
	if x != nil {
		return x.LimitOrders
	}
	return nil
}

type GetLimitOrderByBizUserIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BizUserId     string                 `protobuf:"bytes,1,opt,name=biz_user_id,json=bizUserId,proto3" json:"biz_user_id,omitempty"` // 业务用户ID
	Page          *PageRequest           `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`                              // 分页参数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitOrderByBizUserIdRequest) Reset() {
	*x = GetLimitOrderByBizUserIdRequest{}
	mi := &file_limit_v1_limit_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitOrderByBizUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitOrderByBizUserIdRequest) ProtoMessage() {}

func (x *GetLimitOrderByBizUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitOrderByBizUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetLimitOrderByBizUserIdRequest) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{14}
}

func (x *GetLimitOrderByBizUserIdRequest) GetBizUserId() string {
	if x != nil {
		return x.BizUserId
	}
	return ""
}

func (x *GetLimitOrderByBizUserIdRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

type GetLimitOrderByBizUserIdReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LimitOrders   []*LimitOrder          `protobuf:"bytes,1,rep,name=limit_orders,json=limitOrders,proto3" json:"limit_orders,omitempty"` // 订单列表
	Page          *PageResponse          `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`                                  // 分页信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLimitOrderByBizUserIdReply) Reset() {
	*x = GetLimitOrderByBizUserIdReply{}
	mi := &file_limit_v1_limit_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLimitOrderByBizUserIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitOrderByBizUserIdReply) ProtoMessage() {}

func (x *GetLimitOrderByBizUserIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_limit_v1_limit_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitOrderByBizUserIdReply.ProtoReflect.Descriptor instead.
func (*GetLimitOrderByBizUserIdReply) Descriptor() ([]byte, []int) {
	return file_limit_v1_limit_proto_rawDescGZIP(), []int{15}
}

func (x *GetLimitOrderByBizUserIdReply) GetLimitOrders() []*LimitOrder {
	if x != nil {
		return x.LimitOrders
	}
	return nil
}

func (x *GetLimitOrderByBizUserIdReply) GetPage() *PageResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

var File_limit_v1_limit_proto protoreflect.FileDescriptor

var file_limit_v1_limit_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x22, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x22, 0xf6, 0x02, 0x0a,
	0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x11, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x64, 0x74,
	0x22, 0x82, 0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x75, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x17, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x17, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x22, 0x92, 0x05, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3a, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x7a, 0x49, 0x64,
	0x73, 0x22, 0x52, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x70, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x69, 0x7a, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x2a, 0x3d, 0x0a, 0x0a, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x60, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x01, 0x32, 0xf0, 0x03, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x5e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x5e, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x69, 0x7a,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x69, 0x7a, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x27, 0x0a, 0x0c, 0x61, 0x70,
	0x69, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x15, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_limit_v1_limit_proto_rawDescOnce sync.Once
	file_limit_v1_limit_proto_rawDescData []byte
)

func file_limit_v1_limit_proto_rawDescGZIP() []byte {
	file_limit_v1_limit_proto_rawDescOnce.Do(func() {
		file_limit_v1_limit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_limit_v1_limit_proto_rawDesc), len(file_limit_v1_limit_proto_rawDesc)))
	})
	return file_limit_v1_limit_proto_rawDescData
}

var file_limit_v1_limit_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_limit_v1_limit_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_limit_v1_limit_proto_goTypes = []any{
	(AmountType)(0),                         // 0: api.limit.v1.AmountType
	(StopLossProfitType)(0),                 // 1: api.limit.v1.StopLossProfitType
	(*PageRequest)(nil),                     // 2: api.limit.v1.PageRequest
	(*PageResponse)(nil),                    // 3: api.limit.v1.PageResponse
	(*LimitOrderBuy)(nil),                   // 4: api.limit.v1.LimitOrderBuy
	(*LimitOrderSell)(nil),                  // 5: api.limit.v1.LimitOrderSell
	(*LimitOrderStopLossProfit)(nil),        // 6: api.limit.v1.LimitOrderStopLossProfit
	(*CreateLimitOrderRequest)(nil),         // 7: api.limit.v1.CreateLimitOrderRequest
	(*CreateLimitOrderReply)(nil),           // 8: api.limit.v1.CreateLimitOrderReply
	(*CancelLimitOrderRequest)(nil),         // 9: api.limit.v1.CancelLimitOrderRequest
	(*CancelLimitOrderReply)(nil),           // 10: api.limit.v1.CancelLimitOrderReply
	(*GetLimitOrderRequest)(nil),            // 11: api.limit.v1.GetLimitOrderRequest
	(*LimitOrder)(nil),                      // 12: api.limit.v1.LimitOrder
	(*GetLimitOrderReply)(nil),              // 13: api.limit.v1.GetLimitOrderReply
	(*GetLimitOrdersRequest)(nil),           // 14: api.limit.v1.GetLimitOrdersRequest
	(*GetLimitOrdersReply)(nil),             // 15: api.limit.v1.GetLimitOrdersReply
	(*GetLimitOrderByBizUserIdRequest)(nil), // 16: api.limit.v1.GetLimitOrderByBizUserIdRequest
	(*GetLimitOrderByBizUserIdReply)(nil),   // 17: api.limit.v1.GetLimitOrderByBizUserIdReply
}
var file_limit_v1_limit_proto_depIdxs = []int32{
	0,  // 0: api.limit.v1.LimitOrderSell.amount_type:type_name -> api.limit.v1.AmountType
	1,  // 1: api.limit.v1.LimitOrderStopLossProfit.type:type_name -> api.limit.v1.StopLossProfitType
	4,  // 2: api.limit.v1.CreateLimitOrderRequest.limit_buy:type_name -> api.limit.v1.LimitOrderBuy
	5,  // 3: api.limit.v1.CreateLimitOrderRequest.limit_sell:type_name -> api.limit.v1.LimitOrderSell
	6,  // 4: api.limit.v1.CreateLimitOrderRequest.stop_loss_profit:type_name -> api.limit.v1.LimitOrderStopLossProfit
	4,  // 5: api.limit.v1.LimitOrder.limit_buy:type_name -> api.limit.v1.LimitOrderBuy
	5,  // 6: api.limit.v1.LimitOrder.limit_sell:type_name -> api.limit.v1.LimitOrderSell
	6,  // 7: api.limit.v1.LimitOrder.stop_loss_profit:type_name -> api.limit.v1.LimitOrderStopLossProfit
	12, // 8: api.limit.v1.GetLimitOrderReply.limit_orders:type_name -> api.limit.v1.LimitOrder
	12, // 9: api.limit.v1.GetLimitOrdersReply.limit_orders:type_name -> api.limit.v1.LimitOrder
	2,  // 10: api.limit.v1.GetLimitOrderByBizUserIdRequest.page:type_name -> api.limit.v1.PageRequest
	12, // 11: api.limit.v1.GetLimitOrderByBizUserIdReply.limit_orders:type_name -> api.limit.v1.LimitOrder
	3,  // 12: api.limit.v1.GetLimitOrderByBizUserIdReply.page:type_name -> api.limit.v1.PageResponse
	7,  // 13: api.limit.v1.Limit.CreateLimitOrder:input_type -> api.limit.v1.CreateLimitOrderRequest
	9,  // 14: api.limit.v1.Limit.CancelLimitOrder:input_type -> api.limit.v1.CancelLimitOrderRequest
	11, // 15: api.limit.v1.Limit.GetLimitOrder:input_type -> api.limit.v1.GetLimitOrderRequest
	14, // 16: api.limit.v1.Limit.GetLimitOrders:input_type -> api.limit.v1.GetLimitOrdersRequest
	16, // 17: api.limit.v1.Limit.GetLimitOrderByBizUserId:input_type -> api.limit.v1.GetLimitOrderByBizUserIdRequest
	8,  // 18: api.limit.v1.Limit.CreateLimitOrder:output_type -> api.limit.v1.CreateLimitOrderReply
	10, // 19: api.limit.v1.Limit.CancelLimitOrder:output_type -> api.limit.v1.CancelLimitOrderReply
	13, // 20: api.limit.v1.Limit.GetLimitOrder:output_type -> api.limit.v1.GetLimitOrderReply
	15, // 21: api.limit.v1.Limit.GetLimitOrders:output_type -> api.limit.v1.GetLimitOrdersReply
	17, // 22: api.limit.v1.Limit.GetLimitOrderByBizUserId:output_type -> api.limit.v1.GetLimitOrderByBizUserIdReply
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_limit_v1_limit_proto_init() }
func file_limit_v1_limit_proto_init() {
	if File_limit_v1_limit_proto != nil {
		return
	}
	file_limit_v1_limit_proto_msgTypes[2].OneofWrappers = []any{}
	file_limit_v1_limit_proto_msgTypes[5].OneofWrappers = []any{
		(*CreateLimitOrderRequest_LimitBuy)(nil),
		(*CreateLimitOrderRequest_LimitSell)(nil),
		(*CreateLimitOrderRequest_StopLossProfit)(nil),
	}
	file_limit_v1_limit_proto_msgTypes[10].OneofWrappers = []any{
		(*LimitOrder_LimitBuy)(nil),
		(*LimitOrder_LimitSell)(nil),
		(*LimitOrder_StopLossProfit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_limit_v1_limit_proto_rawDesc), len(file_limit_v1_limit_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_limit_v1_limit_proto_goTypes,
		DependencyIndexes: file_limit_v1_limit_proto_depIdxs,
		EnumInfos:         file_limit_v1_limit_proto_enumTypes,
		MessageInfos:      file_limit_v1_limit_proto_msgTypes,
	}.Build()
	File_limit_v1_limit_proto = out.File
	file_limit_v1_limit_proto_goTypes = nil
	file_limit_v1_limit_proto_depIdxs = nil
}
