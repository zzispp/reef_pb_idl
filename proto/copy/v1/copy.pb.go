// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: copy/v1/copy.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 交易类型
type TradeType int32

const (
	TradeType_TRADE_TYPE_UNSPECIFIED TradeType = 0
	TradeType_TRADE_TYPE_BUY         TradeType = 1 // 买入
	TradeType_TRADE_TYPE_SELL        TradeType = 2 // 卖出
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "TRADE_TYPE_UNSPECIFIED",
		1: "TRADE_TYPE_BUY",
		2: "TRADE_TYPE_SELL",
	}
	TradeType_value = map[string]int32{
		"TRADE_TYPE_UNSPECIFIED": 0,
		"TRADE_TYPE_BUY":         1,
		"TRADE_TYPE_SELL":        2,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_copy_v1_copy_proto_enumTypes[0].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_copy_v1_copy_proto_enumTypes[0]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_copy_v1_copy_proto_rawDescGZIP(), []int{0}
}

// 买入策略
type BuyStrategy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MinAmount         string                 `protobuf:"bytes,1,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`                           // 最小买入金额(带精度)
	MaxAmount         string                 `protobuf:"bytes,2,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`                           // 最大买入金额(带精度)
	Strategy          uint32                 `protobuf:"varint,3,opt,name=strategy,proto3" json:"strategy,omitempty"`                                             // 策略类型: 0是固定 1是百分比
	StrategyValue     string                 `protobuf:"bytes,4,opt,name=strategy_value,json=strategyValue,proto3" json:"strategy_value,omitempty"`               // 策略值：固定金额或百分比
	SlippageTolerance float64                `protobuf:"fixed64,5,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"` // 滑点容忍度
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BuyStrategy) Reset() {
	*x = BuyStrategy{}
	mi := &file_copy_v1_copy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyStrategy) ProtoMessage() {}

func (x *BuyStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_copy_v1_copy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyStrategy.ProtoReflect.Descriptor instead.
func (*BuyStrategy) Descriptor() ([]byte, []int) {
	return file_copy_v1_copy_proto_rawDescGZIP(), []int{0}
}

func (x *BuyStrategy) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *BuyStrategy) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

func (x *BuyStrategy) GetStrategy() uint32 {
	if x != nil {
		return x.Strategy
	}
	return 0
}

func (x *BuyStrategy) GetStrategyValue() string {
	if x != nil {
		return x.StrategyValue
	}
	return ""
}

func (x *BuyStrategy) GetSlippageTolerance() float64 {
	if x != nil {
		return x.SlippageTolerance
	}
	return 0
}

// 卖出策略
type SellStrategy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Strategy          uint32                 `protobuf:"varint,1,opt,name=strategy,proto3" json:"strategy,omitempty"`                                             // 策略类型: 0是固定比例 1是百分比跟随
	StrategyValue     string                 `protobuf:"bytes,2,opt,name=strategy_value,json=strategyValue,proto3" json:"strategy_value,omitempty"`               // 策略值：固定比例或百分比
	SlippageTolerance float64                `protobuf:"fixed64,3,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"` // 滑点容忍度
	MinSellAmount     *string                `protobuf:"bytes,4,opt,name=min_sell_amount,json=minSellAmount,proto3,oneof" json:"min_sell_amount,omitempty"`       // 最小卖出金额(带精度)
	MaxSellAmount     *string                `protobuf:"bytes,5,opt,name=max_sell_amount,json=maxSellAmount,proto3,oneof" json:"max_sell_amount,omitempty"`       // 最大卖出金额(带精度)
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SellStrategy) Reset() {
	*x = SellStrategy{}
	mi := &file_copy_v1_copy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SellStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellStrategy) ProtoMessage() {}

func (x *SellStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_copy_v1_copy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellStrategy.ProtoReflect.Descriptor instead.
func (*SellStrategy) Descriptor() ([]byte, []int) {
	return file_copy_v1_copy_proto_rawDescGZIP(), []int{1}
}

func (x *SellStrategy) GetStrategy() uint32 {
	if x != nil {
		return x.Strategy
	}
	return 0
}

func (x *SellStrategy) GetStrategyValue() string {
	if x != nil {
		return x.StrategyValue
	}
	return ""
}

func (x *SellStrategy) GetSlippageTolerance() float64 {
	if x != nil {
		return x.SlippageTolerance
	}
	return 0
}

func (x *SellStrategy) GetMinSellAmount() string {
	if x != nil && x.MinSellAmount != nil {
		return *x.MinSellAmount
	}
	return ""
}

func (x *SellStrategy) GetMaxSellAmount() string {
	if x != nil && x.MaxSellAmount != nil {
		return *x.MaxSellAmount
	}
	return ""
}

// 跟单条件
type CopyConditions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinPoolSize   *string                `protobuf:"bytes,1,opt,name=min_pool_size,json=minPoolSize,proto3,oneof" json:"min_pool_size,omitempty"`    // 最小池子大小(k)
	MaxPoolSize   *string                `protobuf:"bytes,2,opt,name=max_pool_size,json=maxPoolSize,proto3,oneof" json:"max_pool_size,omitempty"`    // 最大池子大小(k)
	MinBuyAmount  *string                `protobuf:"bytes,3,opt,name=min_buy_amount,json=minBuyAmount,proto3,oneof" json:"min_buy_amount,omitempty"` // 目标地址最小买入金额(带精度)
	MaxBuyAmount  *string                `protobuf:"bytes,4,opt,name=max_buy_amount,json=maxBuyAmount,proto3,oneof" json:"max_buy_amount,omitempty"` // 目标地址最大买入金额(带精度)
	MinMarketCap  *string                `protobuf:"bytes,5,opt,name=min_market_cap,json=minMarketCap,proto3,oneof" json:"min_market_cap,omitempty"` // 最小市值(k)
	MaxMarketCap  *string                `protobuf:"bytes,6,opt,name=max_market_cap,json=maxMarketCap,proto3,oneof" json:"max_market_cap,omitempty"` // 最大市值(k)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyConditions) Reset() {
	*x = CopyConditions{}
	mi := &file_copy_v1_copy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyConditions) ProtoMessage() {}

func (x *CopyConditions) ProtoReflect() protoreflect.Message {
	mi := &file_copy_v1_copy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyConditions.ProtoReflect.Descriptor instead.
func (*CopyConditions) Descriptor() ([]byte, []int) {
	return file_copy_v1_copy_proto_rawDescGZIP(), []int{2}
}

func (x *CopyConditions) GetMinPoolSize() string {
	if x != nil && x.MinPoolSize != nil {
		return *x.MinPoolSize
	}
	return ""
}

func (x *CopyConditions) GetMaxPoolSize() string {
	if x != nil && x.MaxPoolSize != nil {
		return *x.MaxPoolSize
	}
	return ""
}

func (x *CopyConditions) GetMinBuyAmount() string {
	if x != nil && x.MinBuyAmount != nil {
		return *x.MinBuyAmount
	}
	return ""
}

func (x *CopyConditions) GetMaxBuyAmount() string {
	if x != nil && x.MaxBuyAmount != nil {
		return *x.MaxBuyAmount
	}
	return ""
}

func (x *CopyConditions) GetMinMarketCap() string {
	if x != nil && x.MinMarketCap != nil {
		return *x.MinMarketCap
	}
	return ""
}

func (x *CopyConditions) GetMaxMarketCap() string {
	if x != nil && x.MaxMarketCap != nil {
		return *x.MaxMarketCap
	}
	return ""
}

type CreateCopyOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`                                      // 链
	UserAddress   string                 `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`       // 用户地址
	TargetAddress string                 `protobuf:"bytes,3,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"` // 目标地址
	PrivateKey    string                 `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`          // 用户私钥
	BizOrderId    string                 `protobuf:"bytes,5,opt,name=biz_order_id,json=bizOrderId,proto3" json:"biz_order_id,omitempty"`        // 业务订单id
	// 交易类型
	TradeType TradeType `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3,enum=api.copy.v1.TradeType" json:"trade_type,omitempty"`
	// 买入策略 (当trade_type包含买入时必填)
	BuyStrategy *BuyStrategy `protobuf:"bytes,7,opt,name=buy_strategy,json=buyStrategy,proto3,oneof" json:"buy_strategy,omitempty"`
	// 卖出策略 (当trade_type包含卖出时必填)
	SellStrategy *SellStrategy `protobuf:"bytes,8,opt,name=sell_strategy,json=sellStrategy,proto3,oneof" json:"sell_strategy,omitempty"`
	// 跟单条件
	CopyConditions *CopyConditions `protobuf:"bytes,9,opt,name=copy_conditions,json=copyConditions,proto3,oneof" json:"copy_conditions,omitempty"`
	// 过期时间 (Unix时间戳)
	ExpireTime    int64 `protobuf:"varint,10,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCopyOrderRequest) Reset() {
	*x = CreateCopyOrderRequest{}
	mi := &file_copy_v1_copy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCopyOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCopyOrderRequest) ProtoMessage() {}

func (x *CreateCopyOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_copy_v1_copy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCopyOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateCopyOrderRequest) Descriptor() ([]byte, []int) {
	return file_copy_v1_copy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCopyOrderRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateCopyOrderRequest) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *CreateCopyOrderRequest) GetTargetAddress() string {
	if x != nil {
		return x.TargetAddress
	}
	return ""
}

func (x *CreateCopyOrderRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *CreateCopyOrderRequest) GetBizOrderId() string {
	if x != nil {
		return x.BizOrderId
	}
	return ""
}

func (x *CreateCopyOrderRequest) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *CreateCopyOrderRequest) GetBuyStrategy() *BuyStrategy {
	if x != nil {
		return x.BuyStrategy
	}
	return nil
}

func (x *CreateCopyOrderRequest) GetSellStrategy() *SellStrategy {
	if x != nil {
		return x.SellStrategy
	}
	return nil
}

func (x *CreateCopyOrderRequest) GetCopyConditions() *CopyConditions {
	if x != nil {
		return x.CopyConditions
	}
	return nil
}

func (x *CreateCopyOrderRequest) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type CreateCopyOrderReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCopyOrderReply) Reset() {
	*x = CreateCopyOrderReply{}
	mi := &file_copy_v1_copy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCopyOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCopyOrderReply) ProtoMessage() {}

func (x *CreateCopyOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_copy_v1_copy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCopyOrderReply.ProtoReflect.Descriptor instead.
func (*CreateCopyOrderReply) Descriptor() ([]byte, []int) {
	return file_copy_v1_copy_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCopyOrderReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

var File_copy_v1_copy_proto protoreflect.FileDescriptor

var file_copy_v1_copy_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x70, 0x79, 0x2e, 0x76,
	0x31, 0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfe, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x70, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x61, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x22, 0x9c, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x7a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x70, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x70, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x0b,
	0x62, 0x75, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x70, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x48, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x70, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x70,
	0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x31, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x50, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0x6d, 0x0a, 0x10, 0x43,
	0x6f, 0x70, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x59, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x70, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x70, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x70, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x25, 0x0a, 0x0b, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x70, 0x79, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x14, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_copy_v1_copy_proto_rawDescOnce sync.Once
	file_copy_v1_copy_proto_rawDescData []byte
)

func file_copy_v1_copy_proto_rawDescGZIP() []byte {
	file_copy_v1_copy_proto_rawDescOnce.Do(func() {
		file_copy_v1_copy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_copy_v1_copy_proto_rawDesc), len(file_copy_v1_copy_proto_rawDesc)))
	})
	return file_copy_v1_copy_proto_rawDescData
}

var file_copy_v1_copy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_copy_v1_copy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_copy_v1_copy_proto_goTypes = []any{
	(TradeType)(0),                 // 0: api.copy.v1.TradeType
	(*BuyStrategy)(nil),            // 1: api.copy.v1.BuyStrategy
	(*SellStrategy)(nil),           // 2: api.copy.v1.SellStrategy
	(*CopyConditions)(nil),         // 3: api.copy.v1.CopyConditions
	(*CreateCopyOrderRequest)(nil), // 4: api.copy.v1.CreateCopyOrderRequest
	(*CreateCopyOrderReply)(nil),   // 5: api.copy.v1.CreateCopyOrderReply
}
var file_copy_v1_copy_proto_depIdxs = []int32{
	0, // 0: api.copy.v1.CreateCopyOrderRequest.trade_type:type_name -> api.copy.v1.TradeType
	1, // 1: api.copy.v1.CreateCopyOrderRequest.buy_strategy:type_name -> api.copy.v1.BuyStrategy
	2, // 2: api.copy.v1.CreateCopyOrderRequest.sell_strategy:type_name -> api.copy.v1.SellStrategy
	3, // 3: api.copy.v1.CreateCopyOrderRequest.copy_conditions:type_name -> api.copy.v1.CopyConditions
	4, // 4: api.copy.v1.CopyTradeService.CreateCopyOrder:input_type -> api.copy.v1.CreateCopyOrderRequest
	5, // 5: api.copy.v1.CopyTradeService.CreateCopyOrder:output_type -> api.copy.v1.CreateCopyOrderReply
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_copy_v1_copy_proto_init() }
func file_copy_v1_copy_proto_init() {
	if File_copy_v1_copy_proto != nil {
		return
	}
	file_copy_v1_copy_proto_msgTypes[1].OneofWrappers = []any{}
	file_copy_v1_copy_proto_msgTypes[2].OneofWrappers = []any{}
	file_copy_v1_copy_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_copy_v1_copy_proto_rawDesc), len(file_copy_v1_copy_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_copy_v1_copy_proto_goTypes,
		DependencyIndexes: file_copy_v1_copy_proto_depIdxs,
		EnumInfos:         file_copy_v1_copy_proto_enumTypes,
		MessageInfos:      file_copy_v1_copy_proto_msgTypes,
	}.Build()
	File_copy_v1_copy_proto = out.File
	file_copy_v1_copy_proto_goTypes = nil
	file_copy_v1_copy_proto_depIdxs = nil
}
